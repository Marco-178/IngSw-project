{
  "uuid": "8ba20488-ef75-4c53-8a8e-e0de2e8d1486",
  "lastMigration": 32,
  "name": "Demo API",
  "endpointPrefix": "",
  "latency": 0,
  "port": 3000,
  "hostname": "",
  "folders": [],
  "routes": [
    {
      "uuid": "0f9489ea-b12f-4f21-a680-c5901bf87f70",
      "type": "crud",
      "documentation": "Endpoint performing CRUD operations on a data bucket",
      "method": "",
      "endpoint": "users",
      "responses": [
        {
          "uuid": "92b0c3e5-70aa-4db7-a39d-e70f9c3f700a",
          "body": "{}",
          "latency": 0,
          "statusCode": 200,
          "label": "",
          "headers": [],
          "bodyType": "DATABUCKET",
          "filePath": "",
          "databucketID": "8hfk",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "0b2f2a1e-73b2-4225-95fb-fd6fed2dce31",
      "type": "http",
      "documentation": "Generate random body (JSON, text, CSV, etc) with templating",
      "method": "get",
      "endpoint": "template",
      "responses": [
        {
          "uuid": "92f09096-9858-4967-b873-c23b2abdd3af",
          "body": "{\n  \"Templating example\": \"For more information about templating, click the blue 'i' above this editor\",\n  \"users\": [\n    {{# repeat (queryParam 'total' '10') }}\n      {\n        \"userId\": \"{{ faker 'number.int' min=10000 max=100000 }}\",\n        \"firstname\": \"{{ faker 'person.firstName' }}\",\n        \"lastname\": \"{{ faker 'person.lastName' }}\",\n        \"friends\": [\n          {{# repeat (faker 'number.int' 5) }}\n            {\n              \"id\": \"{{ faker 'string.uuid' }}\"\n            }\n          {{/ repeat }}\n        ]\n      },\n    {{/ repeat }}\n  ],\n  \"total\": \"{{queryParam 'total' '10'}}\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Creates 10 random users, or the amount specified in the 'total' query param",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "07c71664-519b-4f2c-a2af-b6f494499c5c",
      "type": "http",
      "documentation": "Use multiple responses with rules",
      "method": "post",
      "endpoint": "content/:param1",
      "responses": [
        {
          "uuid": "cb5f2fc0-52fc-49ca-911f-e020a845c1af",
          "body": "{\n  \"Rules example\": \"Default response. Served if route param 'param1' is not present.\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Default response",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        },
        {
          "uuid": "e1b64cf0-da54-4287-acfe-c9a021a24829",
          "body": "{\n  \"Rules example\": \"Content XYZ. Served if route param 'param1' equals 'xyz'. (See in 'Rules' tab)\"\n}",
          "latency": 0,
          "statusCode": 200,
          "label": "Content XYZ",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "params",
              "modifier": "param1",
              "value": "xyz",
              "invert": false,
              "operator": "equals"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        },
        {
          "uuid": "8109cae2-530c-4a98-a110-20f9699b9482",
          "body": "{\n  \"Rules example\": \"Content not found. Served if route param 'param1' is not equal to 'xyz'. (See in 'Rules' tab)\"\n}\n",
          "latency": 0,
          "statusCode": 404,
          "label": "Content not found",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [
            {
              "target": "params",
              "modifier": "param1",
              "value": "^(?!.xyz).$",
              "invert": false,
              "operator": "regex"
            }
          ],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "f501fdaa-7ad7-4596-8403-dbbcf9c5d0fc",
      "type": "http",
      "documentation": "Serve a file dynamically depending on the path param 'pageName'.",
      "method": "get",
      "endpoint": "file/:pageName",
      "responses": [
        {
          "uuid": "ebec6170-f1dd-4269-9a4d-e6030b09dc7e",
          "body": "",
          "latency": 0,
          "statusCode": 200,
          "label": "Templating is also supported in file path",
          "headers": [
            {
              "key": "Content-Type",
              "value": "text/html"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "./page{{urlParam 'pageName'}}.html",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "00e37ef4-5cbd-450b-8f0a-4a8653cf23e6",
      "type": "http",
      "documentation": "Path supports various patterns",
      "method": "put",
      "endpoint": "path/with/pattern(s)?/*",
      "responses": [
        {
          "uuid": "b2d8fd7b-f8e4-403b-a4e7-6f471b691d3c",
          "body": "The current path will match the following routes: \nhttp://localhost:3000/path/with/pattern/\nhttp://localhost:3000/path/with/patterns/\nhttp://localhost:3000/path/with/patterns/anything-else\n\nLearn more about Mockoon's routing: https://mockoon.com/docs/latest/api-endpoints/routing/",
          "latency": 0,
          "statusCode": 200,
          "label": "",
          "headers": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "27634e79-e630-434d-8d11-9e33acb87310",
      "type": "http",
      "documentation": "Can Mockoon forward or record entering requests?",
      "method": "get",
      "endpoint": "forward-and-record",
      "responses": [
        {
          "uuid": "b1d9d45d-9daf-444e-a69c-ac0cca9ab509",
          "body": "Mockoon can also act as a proxy and forward all entering requests that are not caught by declared routes. \nYou can activate this option in the environment settings ('cog' icon in the upper right corner). \nTo learn more: https://mockoon.com/docs/latest/server-configuration/proxy-mode/\n\nAs always, all entering requests, and responses from the proxied server will be recorded ('clock' icon in the upper right corner).\nTo learn more: https://mockoon.com/docs/latest/logging-and-recording/requests-logging/",
          "latency": 0,
          "statusCode": 200,
          "label": "",
          "headers": [
            {
              "key": "Content-Type",
              "value": "text/plain"
            }
          ],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": false,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "b158ba65-c2fa-4eef-b3d7-9c4e48478106",
      "type": "http",
      "documentation": "",
      "method": "get",
      "endpoint": "api/mock_supplier",
      "responses": [
        {
          "uuid": "dc8da30f-58f9-494a-b514-4d097fa53571",
          "body": "{\n  \"event_id\": \"{{ faker 'number.int' min=1 max=10}}\",\n  \"event_type\": \"{{oneOf (array 'catering' 'pulizie' 'organizzazione' 'intrattenimento' 'decorazioni' 'tecnologia' 'animazione') }}\",\n  \"date\": \"{{dateFormat (faker 'date.soon' days=365) 'yyyy-MM-dd'}}\",\n  \"schedule_start\": \"{{time '07:00' '14:00' 'HH:mm:ss'}}\",\n  \"schedule_end\": \"{{time '15:00' '23:59' 'HH:mm:ss'}}\",\n  \"max_participants\": \"{{ faker 'number.int' min=5 max=1000}}\"\n}\n",
          "latency": 0,
          "statusCode": 200,
          "label": "",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    },
    {
      "uuid": "e08580c4-7ad9-4ae3-9cce-c3e858409ecb",
      "type": "http",
      "documentation": "",
      "method": "get",
      "endpoint": "api/fetchUser",
      "responses": [
        {
          "uuid": "8afff00e-5a33-4033-a441-055912ac702a",
          "body": "{\n  \"codice_fiscale\": \"{{oneOf (array 'SNTMRC86M15H501F') }}\"\n}\n",
          "latency": 0,
          "statusCode": 200,
          "label": "",
          "headers": [],
          "bodyType": "INLINE",
          "filePath": "",
          "databucketID": "",
          "sendFileAsBody": false,
          "rules": [],
          "rulesOperator": "OR",
          "disableTemplating": false,
          "fallbackTo404": false,
          "default": true,
          "crudKey": "id",
          "callbacks": []
        }
      ],
      "responseMode": null
    }
  ],
  "rootChildren": [
    {
      "type": "route",
      "uuid": "0f9489ea-b12f-4f21-a680-c5901bf87f70"
    },
    {
      "type": "route",
      "uuid": "0b2f2a1e-73b2-4225-95fb-fd6fed2dce31"
    },
    {
      "type": "route",
      "uuid": "07c71664-519b-4f2c-a2af-b6f494499c5c"
    },
    {
      "type": "route",
      "uuid": "f501fdaa-7ad7-4596-8403-dbbcf9c5d0fc"
    },
    {
      "type": "route",
      "uuid": "00e37ef4-5cbd-450b-8f0a-4a8653cf23e6"
    },
    {
      "type": "route",
      "uuid": "27634e79-e630-434d-8d11-9e33acb87310"
    },
    {
      "type": "route",
      "uuid": "b158ba65-c2fa-4eef-b3d7-9c4e48478106"
    },
    {
      "type": "route",
      "uuid": "e08580c4-7ad9-4ae3-9cce-c3e858409ecb"
    }
  ],
  "proxyMode": false,
  "proxyHost": "",
  "proxyRemovePrefix": false,
  "tlsOptions": {
    "enabled": false,
    "type": "CERT",
    "pfxPath": "",
    "certPath": "",
    "keyPath": "",
    "caPath": "",
    "passphrase": ""
  },
  "cors": true,
  "headers": [
    {
      "key": "Content-Type",
      "value": "application/json"
    }
  ],
  "proxyReqHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "proxyResHeaders": [
    {
      "key": "",
      "value": ""
    }
  ],
  "data": [
    {
      "uuid": "8e04e839-1e3b-43da-b584-1ecba0c5ad57",
      "id": "8hfk",
      "name": "Users",
      "documentation": "",
      "value": "[\n  {{#repeat 50}}\n  {\n    \"id\": \"{{faker 'string.uuid'}}\",\n    \"username\": \"{{faker 'internet.userName'}}\"\n  }\n  {{/repeat}}\n]"
    }
  ],
  "callbacks": []
}
